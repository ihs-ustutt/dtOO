#!/bin/bash

usage() { echo "$0 usage:" && grep " .)\ #" $0; exit 0; }
[ $# -eq 0 ] && usage
while getopts ":i:n:ho:" opt; do
  case ${opt} in
    h) # Display help
      usage
      ;;
    i) # Specify the prefix for install (_installPrefix)
      _installPrefix=${OPTARG}
      if [[ "$_installPrefix" != /* ]]; then
        echo "Please specify relative path starting with /"
        exit 0
      fi
      ;;
    n) # Specify the number of build processes (_nProcs)
      _nProcs=$OPTARG
      ;;
    o) # Build [ all ] or only one dependency [ openmesh openvolumemesh gmsh cgm moab ]
      _dep=$OPTARG
      ;;
    \?)
      echo "Invalid option: $OPTARG" 1>&2
      exit
      ;;
    :)
      echo "Option ${OPTARG} requires an argument" 1>&2
      exit
      ;;
  esac
done
shift $((OPTIND -1))

echo "#"
echo "# _installPrefix=${_installPrefix}"
echo "# _nProcs=${_nProcs}"
echo "# _dep=${_dep}"
echo "#"

# create directory
mkdir -p ThirdParty
cd ThirdParty
_pwd=`pwd`

#-------------------------------------------------------------------------------
# OpenMesh
#-------------------------------------------------------------------------------
echo "# Build OpenMesh ..."
if [[ "$_dep" == "openmesh" || "$_dep" == "all" ]]; then
  cd $_pwd
  rm -rf OpenMesh-8.1.tar.gz build_OpenMesh-8.1 OpenMesh-8.1
  if [[ ! -f OpenMesh-8.1.tar.gz ]]; then
    wget https://www.graphics.rwth-aachen.de/media/openmesh_static/Releases/8.1/OpenMesh-8.1.tar.gz 
  fi
  tar xfz OpenMesh-8.1.tar.gz
  mkdir -p ${_pwd}/build_OpenMesh-8.1
  cd ${_pwd}/build_OpenMesh-8.1
  cmake \
    -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
    ../OpenMesh-8.1

  make -j${_nProcs} install
else
  echo "# ...skip"
fi

#-------------------------------------------------------------------------------
# OpenVolumeMesh
#-------------------------------------------------------------------------------
echo "# Build OpenVolumeMesh ..."
if [[ "$_dep" == "openvolumemesh" || "$_dep" == "all" ]]; then
  cd $_pwd
  rm -rf OpenVolumeMesh build_OpenVolumeMesh
  if [[ ! -d OpenVolumeMesh ]]; then
    git clone https://github.com/nTopology/OpenVolumeMesh.git OpenVolumeMesh 
  fi
  mkdir -p ${_pwd}/build_OpenVolumeMesh
  cd ${_pwd}/build_OpenVolumeMesh
  cmake \
    -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
    -DCMAKE_BUILD_TYPE=Release \
    ../OpenVolumeMesh

  make -j${_nProcs} install
else
  echo "# ...skip"
fi
#-------------------------------------------------------------------------------
# gmsh
#-------------------------------------------------------------------------------
echo "# Build gmsh ..."
if [[ "$_dep" == "gmsh" || "$_dep" == "all" ]]; then
  cd $_pwd
  rm -rf gmsh build_gmsh
  git clone https://gitlab.onelab.info/gmsh/gmsh.git gmsh
  cd ${_pwd}/gmsh

  if [[ -z "$(git status CMakeLists.txt | grep modified)" ]]; then
    echo "Modify CMakeLists.txt"
    sed -e "s%file(GLOB_RECURSE HEADERS Common%file(GLOB_RECURSE HEADERS Parser/*.h Common%g" -i CMakeLists.txt
  fi
  if [[ -z "$(git status Geo/GEntity.h | grep modified)" ]]; then
    echo "Modify Geo/GEntity.h"
    sed '/^.*GModel \*model.*$/a\ \ void setModel( GModel * model ) { _model = model; }' -i Geo/GEntity.h
  fi
  if [[ -z "$(git status Geo/MVertex.h | grep modified)" ]]; then
    echo "Modify Geo/MVertex.h"
    sed '/^.*getNum\(\).*const.*$/a\ \ inline void setNum(int const num) { _num = num; }' -i Geo/MVertex.h
  fi
  if [[ -z "$(git status Mesh/meshGEdge.cpp | grep modified)" ]]; then
    echo "Modify Mesh/meshGEdge.cpp"
    sed -e "s%static void copyMesh%void copyMesh%g" -i Mesh/meshGEdge.cpp
  fi
  if [[ -z "$(git status Mesh/meshGFace.cpp | grep modified)" ]]; then
    echo "Modify Mesh/meshGFace.cpp"
    sed -e "s%static void copyMesh%void copyMesh%g" -i Mesh/meshGFace.cpp
  fi

  mkdir -p ${_pwd}/build_gmsh
  cd ${_pwd}/build_gmsh
  cmake \
    -DCMAKE_INSTALL_PREFIX=${_installPrefix} \
    -DENABLE_BUILD_SHARED=ON \
    -DENABLE_PRIVATE_API=ON \
    ../gmsh

  make -j${_nProcs} install
else
  echo "# ...skip"
fi

#-------------------------------------------------------------------------------
# cgm
#-------------------------------------------------------------------------------
echo "# Build cgm ..."
if [[ "$_dep" == "cgm" || "$_dep" == "all" ]]; then
  cd $_pwd
  rm -rf cgm
  git clone https://bitbucket.org/fathomteam/cgm.git cgm
  cd ${_pwd}/cgm
  autoreconf -i
  LDFLAGS=-L${_installPrefix}/lib ./configure \
    --prefix=${_installPrefix} \
    --libdir=${_installPrefix}/lib \
    --enable-debug \
    --with-occ=/usr/ \
    --enable-shared=yes \
    --enable-static=no

  make -j${_nProcs} install
else
  echo "# ...skip"
fi
#-------------------------------------------------------------------------------
# moab
#-------------------------------------------------------------------------------
echo "# Build moab ..."
if [[ "$_dep" == "moab" || "$_dep" == "all" ]]; then
  cd $_pwd
  rm -rf moab 
  git clone https://bitbucket.org/fathomteam/moab.git moab
  cd ${_pwd}/moab
  autoreconf -i
  ./configure \
    --exec-prefix=${_installPrefix} \
    --prefix=${_installPrefix} \
    --with-cgns=/usr/lib \
    --enable-shared=yes \
    --enable-static=no \
    --enable-debug \
    --with-cgm=${_installPrefix}

  make -j${_nProcs} install
else
  echo "# ...skip"
fi