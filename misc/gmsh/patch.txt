Index: .
===================================================================
--- .	(revision 18972)
+++ .	(working copy)

Property changes on: .
___________________________________________________________________
Modified: svn:ignore
## -1,3 +1,4 ##
 .*project
 .settings
 _*
+build
Index: CMakeLists.txt
===================================================================
--- CMakeLists.txt	(revision 18972)
+++ CMakeLists.txt	(working copy)
@@ -1,4 +1,4 @@
-# Gmsh - Copyright (C) 1997-2014 C. Geuzaine, J.-F. Remacle
+# Gmsh - Copyright (C) 1997-2013 C. Geuzaine, J.-F. Remacle
 #
 # See the LICENSE.txt file for license information. Please report all
 # bugs and problems to the public mailing list <gmsh@geuz.org>.
@@ -44,7 +44,6 @@
 opt(CGNS "Enable CGNS mesh export (experimental)" OFF)
 opt(CAIRO "Enable Cairo to render fonts (experimental)" ${DEFAULT})
 opt(CHACO "Enable Chaco mesh partitioner (alternative to Metis)" ${DEFAULT})
-opt(COMPRESSED_IO "Enable compressed (gzip) input/output using zlib" OFF)
 opt(DINTEGRATION "Enable discrete integration (needed for levelsets)" ${DEFAULT})
 opt(FLTK "Enable FLTK graphical user interface (requires mesh/post)" ${DEFAULT})
 opt(FOURIER_MODEL "Enable Fourier geometrical models (experimental)" OFF)
@@ -64,9 +63,9 @@
 opt(NETGEN "Enable Netgen 3D frontal mesh generator" ${DEFAULT})
 opt(NUMPY "Enable conversion between fullMatrix and numpy array (requires SWIG)" OFF)
 opt(OCC "Enable Open CASCADE geometrical models" ${DEFAULT})
-opt(ONELAB "Enable ONELAB solver interface" ${DEFAULT})
-opt(ONELAB2 "Enable experimental ONELAB-Cloud solver interface" OFF)
-opt(ONELAB_METAMODEL "Enable ONELAB metamodels (experimental)" ${DEFAULT})
+opt(GOOGLE_PERFTOOLS "Enable google perf tools?" OFF)
+opt(ONELAB "Enable OneLab solver interface" ${DEFAULT})
+opt(ONELAB_METAMODEL "Enable OneLab metamodels (experimental)" ${DEFAULT})
 opt(OPENMP "Enable OpenMP (experimental)" OFF)
 opt(OPTHOM "Enable high-order mesh optimization tools" ${DEFAULT})
 opt(OS_SPECIFIC_INSTALL "Enable OS-specific (e.g. app bundle) installation" ${DEFAULT})
@@ -91,7 +90,7 @@
 
 set(GMSH_MAJOR_VERSION 2)
 set(GMSH_MINOR_VERSION 8)
-set(GMSH_PATCH_VERSION 5)
+set(GMSH_PATCH_VERSION 4)
 set(GMSH_EXTRA_VERSION "" CACHE STRING "Gmsh extra version string")
 
 set(GMSH_VERSION "${GMSH_MAJOR_VERSION}.${GMSH_MINOR_VERSION}")
@@ -106,7 +105,7 @@
     Common/OS.h Common/StringUtils.h Common/OpenFile.h
     Common/onelab.h Common/GmshSocket.h Common/onelabUtils.h
   Numeric/Numeric.h Numeric/GaussIntegration.h Numeric/polynomialBasis.h
-    Numeric/JacobianBasis.h Numeric/MetricBasis.h Numeric/bezierBasis.h Numeric/fullMatrix.h
+    Numeric/JacobianBasis.h Numeric/bezierBasis.h Numeric/fullMatrix.h
     Numeric/simpleFunction.h Numeric/cartesian.h Numeric/ElementType.h
   Geo/GModel.h Geo/GEntity.h Geo/GPoint.h Geo/GVertex.h Geo/GEdge.h 
     Geo/GFace.h Geo/GRegion.h Geo/GEdgeLoop.h Geo/GEdgeCompound.h 
@@ -124,6 +123,7 @@
     Mesh/meshGFaceElliptic.h Mesh/meshPartition.h Mesh/meshGFaceDelaunayInsertion.h 
     Mesh/simple3D.h Mesh/meshPartitionOptions.h Mesh/directions3D.h Mesh/yamakawa.h
     Mesh/Voronoi3D.h Mesh/Levy3D.h Mesh/periodical.h Mesh/meshMetric.h
+    Mesh/meshGEdge.h Mesh/meshGFace.h Mesh/meshGRegion.h
   Numeric/mathEvaluator.h
   Solver/dofManager.h Solver/femTerm.h Solver/laplaceTerm.h Solver/elasticityTerm.h
     Solver/crossConfTerm.h Solver/orthogonalTerm.h
@@ -491,20 +491,16 @@
 endif(ENABLE_NATIVE_FILE_CHOOSER)
 
 if(ENABLE_ONELAB)
-  set_config_option(HAVE_ONELAB "ONELAB")
+  set_config_option(HAVE_ONELAB "OneLab")
   if(ENABLE_ONELAB_METAMODEL)
     add_subdirectory(contrib/onelab)
     include_directories(contrib/onelab)
-    set_config_option(HAVE_ONELAB_METAMODEL "ONELABMetamodel")
+    set_config_option(HAVE_ONELAB_METAMODEL "OneLabMetamodel")
   endif(ENABLE_ONELAB_METAMODEL)
   file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/contrib/onelab/python/onelab.py
             DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
 endif(ENABLE_ONELAB)
 
-if(ENABLE_ONELAB2)
-  set_config_option(HAVE_ONELAB2 "ONELAB2")
-endif(ENABLE_ONELAB2)
-
 if(ENABLE_BUILD_IOS)
   find_file(CMAKE_TOOLCHAIN_FILE "ios.cmake")
   if(NOT CMAKE_TOOLCHAIN_FILE)
@@ -512,9 +508,22 @@
   endif(NOT CMAKE_TOOLCHAIN_FILE)
 endif(ENABLE_BUILD_IOS)
 
+if(ENABLE_BUILD_ANDROID)
+  find_file(CMAKE_TOOLCHAIN_FILE "android.toolchain.cmake")
+  if(NOT CMAKE_TOOLCHAIN_FILE)
+    message(FATAL_ERROR "Cannot compile Gmsh for android without android-cmake")
+  endif(NOT CMAKE_TOOLCHAIN_FILE)
+  set(CMAKE_BUILD_TYPE Release)
+  set(LIBRARY_OUTPUT_PATH_ROOT ${CMAKE_CURRENT_BINARY_DIR})
+  set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/libs/)
+  add_library(androidGmsh SHARED ${GMSH_SRC})
+  set_target_properties(androidGmsh PROPERTIES OUTPUT_NAME Gmsh)
+  target_link_libraries(androidGmsh ${EXTERNAL_LIBRARIES})
+endif(ENABLE_BUILD_ANDROID)
+
 if(HAVE_FLTK OR HAVE_QT OR ENABLE_GRAPHICS)
   if(NOT HAVE_MESH OR NOT HAVE_POST OR NOT HAVE_PLUGINS OR NOT HAVE_ONELAB)
-    message(SEND_ERROR "Cannot compile GUI without Mesh, Post, Plugin and ONELAB")
+    message(SEND_ERROR "Cannot compile GUI without Mesh, Post, Plugin and OneLab")
   endif(NOT HAVE_MESH OR NOT HAVE_POST OR NOT HAVE_PLUGINS OR NOT HAVE_ONELAB)
 
   if(FLTK_JPEG)
@@ -647,16 +656,16 @@
 endif(ENABLE_MATHEX)
 
 if(ENABLE_MPI)
-  find_package(MPI)
-  if(MPI_FOUND)
-    set_config_option(HAVE_MPI "MPI")
-    list(APPEND EXTERNAL_INCLUDES ${MPI_INCLUDE_DIR})
-    list(APPEND EXTERNAL_LIBRARIES ${MPI_LIBRARIES})
-    include(CMakeForceCompiler)
-    # Warning: this actually requires cmake >= 2.8.5
-    cmake_force_c_compiler(${MPI_C_COMPILER} "MPI C Compiler")
-    cmake_force_cxx_compiler(${MPI_CXX_COMPILER} "MPI C++ Compiler")
-  endif(MPI_FOUND)
+   find_package(MPI)
+   if(MPI_FOUND)
+     set_config_option(HAVE_MPI "MPI")
+     list(APPEND EXTERNAL_INCLUDES ${MPI_INCLUDE_DIR})
+     list(APPEND EXTERNAL_LIBRARIES ${MPI_LIBRARIES})
+     include(CMakeForceCompiler)
+     # Warning: this actually requires cmake >= 2.8.5
+     cmake_force_c_compiler(${MPI_C_COMPILER} "MPI C Compiler")
+     cmake_force_cxx_compiler(${MPI_CXX_COMPILER} "MPI C++ Compiler")
+   endif(MPI_FOUND)
 endif(ENABLE_MPI)
 
 if(ENABLE_POPPLER)
@@ -664,10 +673,10 @@
   find_library(POPPLER_CPP_LIB poppler-cpp)
   find_path(POPPLER_INC "poppler/cpp/poppler-document.h" PATH_SUFFIXES src include)
   if(POPPLER_LIB AND POPPLER_INC)
-    set_config_option(HAVE_POPPLER "Poppler")
-    list(APPEND EXTERNAL_LIBRARIES ${POPPLER_LIB})
-    list(APPEND EXTERNAL_LIBRARIES ${POPPLER_CPP_LIB})
-    list(APPEND EXTERNAL_INCLUDES ${POPPLER_INC})
+     set_config_option(HAVE_POPPLER "Poppler")
+     list(APPEND EXTERNAL_LIBRARIES ${POPPLER_LIB})
+     list(APPEND EXTERNAL_LIBRARIES ${POPPLER_CPP_LIB})
+     list(APPEND EXTERNAL_INCLUDES ${POPPLER_INC})
   endif(POPPLER_LIB AND POPPLER_INC)
 endif(ENABLE_POPPLER)
 
@@ -836,30 +845,17 @@
   endif(ENABLE_TAUCS)
 
   if(ENABLE_MUMPS)
-    set(MUMPS_LIBS_REQUIRED smumps dmumps cmumps zmumps mumps_common pord metis)
-    if(NOT ENABLE_MPI)
-      list(APPEND MUMPS_LIBS_REQUIRED mpiseq)
-    endif(NOT ENABLE_MPI)
-    find_all_libraries(MUMPS_LIBRARIES MUMPS_LIBS_REQUIRED "" "lib")
-    find_path(SMUMPS_INC "smumps_c.h" PATH_SUFFIXES src include)
+    find_library(DMUMPS_LIB dmumps PATH_SUFFIXES lib)
+    find_library(ZMUMPS_LIB zmumps PATH_SUFFIXES lib)
     find_path(DMUMPS_INC "dmumps_c.h" PATH_SUFFIXES src include)
-    find_path(CMUMPS_INC "cmumps_c.h" PATH_SUFFIXES src include)
     find_path(ZMUMPS_INC "zmumps_c.h" PATH_SUFFIXES src include)
-    if(MUMPS_LIBRARIES AND SMUMPS_INC AND DMUMPS_INC AND CMUMPS_INC AND ZMUMPS_INC)
-      set_config_option(HAVE_MUMPS "MUMPS")
-      list(APPEND EXTERNAL_LIBRARIES ${MUMPS_LIBRARIES})
-      list(APPEND EXTERNAL_INCLUDES ${SMUMPS_INC})
-      list(APPEND EXTERNAL_INCLUDES ${DMUMPS_INC})
-      list(APPEND EXTERNAL_INCLUDES ${CMUMPS_INC})
-      list(APPEND EXTERNAL_INCLUDES ${ZMUMPS_INC})
-      find_library(GFORTRAN_LIB gfortran)
-      if(GFORTRAN_LIB)
-        list(APPEND EXTERNAL_LIBRARIES ${GFORTRAN_LIB})
-      endif(GFORTRAN_LIB)
-      if(ENABLE_GMM) # use GMM/MUMPS interface
-        add_definitions(-DGMM_USES_MUMPS)
-      endif(ENABLE_GMM)
-    endif(MUMPS_LIBRARIES AND SMUMPS_INC AND DMUMPS_INC AND CMUMPS_INC AND ZMUMPS_INC)
+    if(DMUMPS_LIB AND DMUMPS_INC AND ZMUMPS_LIB AND ZMUMPS_INC)
+        set_config_option(HAVE_MUMPS "MUMPS")
+        list(APPEND EXTERNAL_LIBRARIES ${DMUMPS_LIB})
+        list(APPEND EXTERNAL_INCLUDES ${DMUMPS_INC})
+        list(APPEND EXTERNAL_LIBRARIES ${ZMUMPS_LIB})
+        list(APPEND EXTERNAL_INCLUDES ${ZMUMPS_INC})
+      endif(DMUMPS_LIB AND DMUMPS_INC AND ZMUMPS_LIB AND ZMUMPS_INC)
   endif(ENABLE_MUMPS)
 
   if(ENABLE_PETSC)
@@ -914,12 +910,6 @@
       endif(NOT PETSC_LIBS)
       if(PETSC_LIBS)
         set_config_option(HAVE_PETSC "PETSc")
-	if(NOT HAVE_BLAS)
-          set_config_option(HAVE_BLAS "Blas(PETSc)")
-        endif(NOT HAVE_BLAS)
-	if(NOT HAVE_LAPACK)
-          set_config_option(HAVE_LAPACK "Lapack(PETSc)")
-        endif(NOT HAVE_LAPACK)
       endif(PETSC_LIBS)
       # find slepc (needs to be linked in before petsc)
       if(ENABLE_SLEPC)
@@ -1017,9 +1007,14 @@
   endif(ENABLE_SGEOM)
   list(LENGTH OCC_LIBS_REQUIRED NUM_OCC_LIBS_REQUIRED)
   set(OCC_LIBS)
-  foreach(OCC ${OCC_LIBS_REQUIRED})
-    find_library(OCC_LIB ${OCC} HINTS ENV CASROOT PATH_SUFFIXES lib 
-                 ${OCC_SYS_NAME}/lib ${OCC_SYS_NAME}/vc8/lib)
+  message("OCC_SYS_NAME=${OCC_SYS_NAME}")
+  foreach(OCC ${OCC_LIBS_REQUIRED})  
+#    find_library(OCC_LIB ${OCC} HINTS ENV CASROOT PATH_SUFFIXES lib 
+#                 ${OCC_SYS_NAME}/lib ${OCC_SYS_NAME}/vc8/lib)
+    find_library(OCC_LIB ${OCC} PATHS 
+                 $ENV{OCC_LIB} NO_DEFAULT_PATH)
+  message("OCC_LIB=${OCC_LIB}")
+
     if(OCC_LIB)
       list(APPEND OCC_LIBS ${OCC_LIB})
     else(OCC_LIB)
@@ -1031,6 +1026,7 @@
   if(NUM_OCC_LIBS EQUAL NUM_OCC_LIBS_REQUIRED)
     find_path(OCC_INC "BRep_Tool.hxx" PATHS ENV CASROOT PATH_SUFFIXES inc 
               include include/oce opencascade)
+  message("OCC_INC=${OCC_INC}")
     if(OCC_INC)
       set_config_option(HAVE_OCC "OpenCascade")
       list(APPEND EXTERNAL_LIBRARIES ${OCC_LIBS})
@@ -1065,6 +1061,40 @@
   endif(HAVE_OCC)
 endif(ENABLE_OCC)
 
+if(ENABLE_GOOGLE_PERFTOOLS)
+  FIND_PATH(GOOGLEPERFTOOLS_INCLUDE_DIR google/heap-profiler.h
+  /usr/local/include
+  /usr/include
+  )
+
+  FIND_LIBRARY(GOOGLEPERFTOOLS_TCMALLOC_LIBRARY
+  NAMES tcmalloc
+  PATHS /usr/lib64 /usr/lib /usr/local/lib
+  )
+
+  FIND_LIBRARY(GOOGLEPERFTOOLS_PROFILER_LIBRARY
+  NAMES profiler
+  PATHS /usr/lib64 /usr/lib /usr/local/lib
+  )
+
+  IF (GOOGLEPERFTOOLS_TCMALLOC_LIBRARY AND GOOGLEPERFTOOLS_PROFILER_LIBRARY AND GOOGLEPERFTOOLS_INCLUDE_DIR)
+  SET(GOOGLEPERFTOOLS_FOUND "YES")
+  ELSE (GOOGLEPERFTOOLS_TCMALLOC_LIBRARY AND GOOGLEPERFTOOLS_PROFILER_LIBRARY AND GOOGLEPERFTOOLS_INCLUDE_DIR)
+  SET(GOOGLEPERFTOOLS_FOUND "NO")
+  ENDIF (GOOGLEPERFTOOLS_TCMALLOC_LIBRARY AND GOOGLEPERFTOOLS_PROFILER_LIBRARY AND GOOGLEPERFTOOLS_INCLUDE_DIR)
+
+  IF (GOOGLEPERFTOOLS_FOUND)
+  MESSAGE(STATUS "Found Google perftools")
+  ELSE (GOOGLEPERFTOOLS_FOUND)
+  IF (GOOGLE_PERFTOOLS_FIND_REQUIRED)
+  MESSAGE(FATAL_ERROR "Could not find Google perftools library")
+  ENDIF (GOOGLE_PERFTOOLS_FIND_REQUIRED)
+  ENDIF (GOOGLEPERFTOOLS_FOUND)
+  
+  list(APPEND EXTERNAL_LIBRARIES ${GOOGLEPERFTOOLS_TCMALLOC_LIBRARY} ${GOOGLEPERFTOOLS_PROFILER_LIBRARY})
+  list(APPEND EXTERNAL_INCLUDES ${GOOGLEPERFTOOLS_INCLUDE_DIR})
+endif(ENABLE_GOOGLE_PERFTOOLS)
+
 if(ENABLE_ACIS)
   find_library(ACIS_LIB SpaACIS PATH_SUFFIXES bin/maci386)
   if(ACIS_LIB)
@@ -1077,10 +1107,6 @@
   endif(ACIS_LIB)
 endif(ENABLE_ACIS)
 
-if(HAVE_ZLIB AND ENABLE_COMPRESSED_IO)
-  set_config_option(HAVE_COMPRESSED_IO "CompressedIO")
-endif(HAVE_ZLIB AND ENABLE_COMPRESSED_IO)
-
 if(ENABLE_WRAP_PYTHON)
   find_package(SWIG)
   find_package(PythonLibs)
@@ -1106,9 +1132,9 @@
 endif(HAVE_PYTHON)
 
 check_function_exists(vsnprintf HAVE_VSNPRINTF)
-if(NOT HAVE_VSNPRINTF AND NOT ENABLE_BUILD_IOS AND NOT ENABLE_BUILD_ANDROID)
+if(NOT HAVE_VSNPRINTF AND NOT ENABLE_BUILD_IOS)
   set_config_option(HAVE_NO_VSNPRINTF "NoVsnprintf")
-endif(NOT HAVE_VSNPRINTF AND NOT ENABLE_BUILD_IOS AND NOT ENABLE_BUILD_ANDROID)
+endif(NOT HAVE_VSNPRINTF AND NOT ENABLE_BUILD_IOS)
 
 check_include_file(sys/socket.h HAVE_SYS_SOCKET_H)
 if(HAVE_SYS_SOCKET_H)
@@ -1116,9 +1142,9 @@
 endif(HAVE_SYS_SOCKET_H)
 check_type_size(socklen_t SOCKLEN_T_SIZE)
 set(CMAKE_EXTRA_INCLUDE_FILES)
-if(NOT SOCKLEN_T_SIZE AND NOT ENABLE_BUILD_IOS AND NOT ENABLE_BUILD_ANDROID)
+if(NOT SOCKLEN_T_SIZE AND NOT ENABLE_BUILD_IOS)
   set_config_option(HAVE_NO_SOCKLEN_T "NoSocklenT")
-endif(NOT SOCKLEN_T_SIZE AND NOT ENABLE_BUILD_IOS AND NOT ENABLE_BUILD_ANDROID)
+endif(NOT SOCKLEN_T_SIZE AND NOT ENABLE_BUILD_IOS)
 
 check_include_file(stdint.h HAVE_STDINT_H)
 if(HAVE_STDINT_H)
@@ -1128,9 +1154,9 @@
 endif(HAVE_STDINT_H)
 check_type_size(intptr_t INTPTR_T_SIZE)
 set(CMAKE_EXTRA_INCLUDE_FILES)
-if(NOT INTPTR_T_SIZE AND NOT ENABLE_BUILD_IOS AND NOT ENABLE_BUILD_ANDROID)
+if(NOT INTPTR_T_SIZE AND NOT ENABLE_BUILD_IOS)
   set_config_option(HAVE_NO_INTPTR_T "NoIntptrT")
-endif(NOT INTPTR_T_SIZE AND NOT ENABLE_BUILD_IOS AND NOT ENABLE_BUILD_ANDROID)
+endif(NOT INTPTR_T_SIZE AND NOT ENABLE_BUILD_IOS)
 
 check_include_file(dlfcn.h DLFCN_H)
 if(DLFCN_H)
@@ -1184,7 +1210,7 @@
 check_cxx_compiler_flag("-O0" NOOPT)
 if(NOOPT)
   file(GLOB_RECURSE NOOPT_SRC Numeric/robustPredicates.cpp Mesh/BDS.cpp
-                              Parser/Gmsh.tab.cpp contrib/Tetgen*/predicates.cxx)
+                              Parser/Gmsh.tab.cpp contrib/Tetgen*/*.cxx)
   foreach(FILE ${NOOPT_SRC})
     get_source_file_property(PROP ${FILE} COMPILE_FLAGS)
     if(PROP)
@@ -1243,9 +1269,8 @@
   set(LINK_LIBRARIES ${EXTERNAL_LIBRARIES} ${LAPACK_LIBRARIES})
 endif(HAVE_FLTK)
 
-# Linux-specific linking
+# try to use static gfortran on static Linux builds
 if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
-  # try to use static gfortran on static Linux builds
   if(NOT ENABLE_BUILD_DYNAMIC)
     find_library(GFORTRAN_STATIC libgfortran.a)
     if(GFORTRAN_STATIC)
@@ -1257,12 +1282,6 @@
       set(LINK_LIBRARIES ${LINK_LIBRARIES2})
     endif(GFORTRAN_STATIC)
   endif(NOT ENABLE_BUILD_DYNAMIC)
-  if(HAVE_OCC)
-    find_library(RT_LIB rt)
-    if(RT_LIB)
-      list(APPEND LINK_LIBRARIES ${RT_LIB})
-    endif(RT_LIB)
-  endif(HAVE_OCC)
 endif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
 
 # we could specify include dirs more selectively, but this is simpler
@@ -1293,20 +1312,6 @@
   endif(MSVC)
 endif(ENABLE_BUILD_LIB)
 
-if(ENABLE_BUILD_ANDROID)
-  find_file(CMAKE_TOOLCHAIN_FILE "android.toolchain.cmake")
-  if(NOT CMAKE_TOOLCHAIN_FILE)
-    message(FATAL_ERROR "Cannot compile Gmsh for android without android-cmake")
-  endif(NOT CMAKE_TOOLCHAIN_FILE)
-  set(CMAKE_BUILD_TYPE Release)
-  set(LIBRARY_OUTPUT_PATH_ROOT ${CMAKE_CURRENT_BINARY_DIR})
-  set(LIBRARY_OUTPUT_PATH ${CMAKE_CURRENT_BINARY_DIR}/libs/)
-  add_definitions(-DBUILD_ANDROID)
-  add_library(androidGmsh SHARED ${GMSH_SRC})
-  set_target_properties(androidGmsh PROPERTIES OUTPUT_NAME Gmsh)
-  target_link_libraries(androidGmsh ${EXTERNAL_LIBRARIES})
-endif(ENABLE_BUILD_ANDROID)
-
 # shared library target
 if(ENABLE_BUILD_SHARED OR ENABLE_BUILD_DYNAMIC OR 
    ENABLE_WRAP_PYTHON OR ENABLE_WRAP_JAVA)
@@ -1370,8 +1375,7 @@
     set(CMAKE_EXE_LINK_DYNAMIC_CXX_FLAGS)
   endif(ENABLE_BUILD_DYNAMIC)
 elseif(MSVC)
-  set_target_properties(gmsh PROPERTIES LINK_FLAGS
-    "/STACK:16777216 /SAFESEH:NO")
+  set_target_properties(gmsh PROPERTIES LINK_FLAGS "/STACK:16777216")
 endif(WIN32 AND NOT MSVC OR CYGWIN)
 
 # parser target
@@ -1518,15 +1522,15 @@
   install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/doc/gmsh.1 DESTINATION ${GMSH_MAN})
 endif(UNIX AND NOT CYGWIN)
 
-add_custom_target(get_headers
+add_custom_target(getHeaders
   COMMAND ${CMAKE_COMMAND} -E remove_directory Headers
   COMMAND ${CMAKE_COMMAND} -E make_directory Headers/gmsh
   WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
-foreach(FILE ${GMSH_API})
-  add_custom_command(TARGET get_headers POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy
-                    ${FILE} ${CMAKE_CURRENT_BINARY_DIR}/Headers/gmsh/
-                    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
-endforeach(FILE)
+  foreach(FILE ${GMSH_API})
+    add_custom_command(TARGET getHeaders POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy
+        ${FILE} ${CMAKE_CURRENT_BINARY_DIR}/Headers/gmsh/
+        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+  endforeach(FILE)
 
 find_program(MAKEINFO makeinfo)
 if(MAKEINFO)
@@ -1543,8 +1547,6 @@
                      ARGS ${TEX_DIR}/gmsh.texi WORKING_DIRECTORY ${TEX_DIR})
   add_custom_target(html DEPENDS ${TEX_DIR}/gmsh.html)
   install(FILES ${TEX_DIR}/gmsh.html DESTINATION ${GMSH_DOC} OPTIONAL)
-else(MAKEINFO)
-  add_custom_target(html COMMAND ${CMAKE_COMMAND} -E touch ${TEX_DIR}/gmsh.html)
 endif(MAKEINFO)
 
 find_program(TEXI2PDF texi2pdf)
@@ -1582,16 +1584,22 @@
   get_target_property(LIBNAME lib LOCATION)
   add_custom_target(framework DEPENDS lib
     COMMAND ${CMAKE_COMMAND} -E remove_directory Gmsh.framework
-    COMMAND ${CMAKE_COMMAND} -E make_directory Gmsh.framework/Headers
-    COMMAND ${CMAKE_COMMAND} -E make_directory Gmsh.framework/Resources
-    COMMAND ${CMAKE_COMMAND} -E copy ${LIBNAME} Gmsh.framework/Gmsh
+    COMMAND ${CMAKE_COMMAND} -E make_directory Gmsh.framework/Versions/A/Headers
+    COMMAND ${CMAKE_COMMAND} -E make_directory Gmsh.framework/Versions/A/Resources
+    COMMAND ${CMAKE_COMMAND} -E copy ${LIBNAME} Gmsh.framework/Versions/A/Gmsh
     COMMAND ${CMAKE_COMMAND} -E copy Info_framework.plist 
-                                     Gmsh.framework/Resources/Info.plist
-    COMMAND ${CMAKE_COMMAND} -E create_symlink . Gmsh.framework/Headers/gmsh
+                                     Gmsh.framework/Versions/A/Resources/Info.plist
+    COMMAND ${CMAKE_COMMAND} -E create_symlink A Gmsh.framework/Versions/Current
+    COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/Current/Gmsh 
+                                               Gmsh.framework/Gmsh
+    COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/Current/Headers
+                                               Gmsh.framework/Headers
+    COMMAND ${CMAKE_COMMAND} -E create_symlink Versions/Current/Resources
+                                               Gmsh.framework/Resources 
     WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})
   foreach(FILE ${GMSH_API})
     add_custom_command(TARGET framework POST_BUILD COMMAND ${CMAKE_COMMAND} -E copy
-        ${FILE} ${CMAKE_CURRENT_BINARY_DIR}/Gmsh.framework/Headers/
+        ${FILE} ${CMAKE_CURRENT_BINARY_DIR}/Gmsh.framework/Versions/A/Headers/
         WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
   endforeach(FILE)
 endif(APPLE AND ENABLE_BUILD_LIB)
@@ -1649,7 +1657,7 @@
   set(CPACK_GENERATOR TGZ)
 endif(APPLE AND ENABLE_OS_SPECIFIC_INSTALL)
 
-if(HAVE_PYTHON)
+if (HAVE_PYTHON)
   add_subdirectory(wrappers/gmshpy)
 endif(HAVE_PYTHON)
 
@@ -1663,23 +1671,10 @@
 include(CPack)
 
 include(CTest)
-file(GLOB_RECURSE TESTFILES 
-     tutorial/*.geo demos/*.geo benchmarks/?d/*.geo benchmarks/extrude/*.geo)
+file(GLOB_RECURSE TESTFILES tutorial/*.geo)
 foreach(TESTFILE ${TESTFILES})
-  # use relative path for cygwin/mingw (the pure win exe built with the mingw 
-  # compilers does not understand a full cygwin-style path)
-  FILE(RELATIVE_PATH TEST ${CMAKE_CURRENT_BINARY_DIR} ${TESTFILE})
-  add_test(${TEST} ./gmsh ${TEST} -3 -nopopup -o ./tmp.msh)
+  add_test(${TESTFILE} ./gmsh ${TESTFILE} -3 -o ./tmp.msh)
 endforeach()
-# if(HAVE_PYTHON)
-#   file(GLOB_RECURSE TESTFILES tutorial/*.py)
-#   foreach(TESTFILE ${TESTFILES})
-#     add_test(NAME ${TESTFILE} 
-#              COMMAND ${PYTHON_EXECUTABLE}
-#                      ${TESTFILE} $<CONFIGURATION>)
-#     # sys.path.insert(0, "path/to/your/package")
-#   endforeach()
-# endif(HAVE_PYTHON)
 
 message(STATUS "")
 message(STATUS "Gmsh ${GMSH_VERSION} has been configured for ${GMSH_OS}")
@@ -1690,6 +1685,8 @@
 message(STATUS " * C++ compiler: " ${CMAKE_CXX_COMPILER})
 message(STATUS " * Install prefix: " ${CMAKE_INSTALL_PREFIX})
 message(STATUS "")
+message(STATUS "Run 'ccmake ${CMAKE_CURRENT_SOURCE_DIR}' to fine-tune the configuration.")
+message(STATUS "")
 
 mark_as_advanced(GMSH_EXTRA_VERSION 
                  ACIS_LIB ANN_INC ANN_LIB CAIRO_LIB CAIRO_INC CGNS_INC GMM_INC 
Index: Geo/GEdge.cpp
===================================================================
--- Geo/GEdge.cpp	(revision 18972)
+++ Geo/GEdge.cpp	(working copy)
@@ -21,6 +21,8 @@
 {
   if(v0) v0->addEdge(this);
   if(v1 && v1 != v0) v1->addEdge(this);
+  l_vertices.push_back(v0);
+  l_vertices.push_back(v1);
   meshStatistics.status = GEdge::PENDING;
   resetMeshAttributes();
 }
Index: Geo/GEdge.h
===================================================================
--- Geo/GEdge.h	(revision 18972)
+++ Geo/GEdge.h	(working copy)
@@ -37,6 +37,7 @@
   mutable std::map<MVertex*, SVector3, std::less<MVertex*> > _normals;
   GEdgeCompound *compound; // this model edge belongs to a compound
   std::list<GFace *> l_faces;
+  std::list<GVertex *> l_vertices;
   // for specific solid modelers that need to re-do the internal curve
   // if a topological change ending points is done (gluing)
   virtual void replaceEndingPointsInternals(GVertex *, GVertex *) {}
@@ -79,6 +80,9 @@
   // faces that this entity bounds
   virtual std::list<GFace*> faces() const { return l_faces; }
 
+  // vertices that are bounded by this entity
+  virtual std::list<GVertex*> vertices() const { return l_vertices; }
+  
   // get the point for the given parameter location
   virtual GPoint point(double p) const = 0;
 
