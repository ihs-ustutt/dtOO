<?xml version="1.0" encoding="ISO-8859-1"?>
<gvru_coupled_fe>
	<case 
		name="OpenFOAMCase" 
		label="gvru_coupled_fe"
		noWriteRule="
  {
  1
  (
  }
  {
  )
  }
    "		
		dictRule="
			controlDict 
			{
		    dtOOFileName      &quot;system/controlDict&quot;;
				application       MRFSimpleFoam;
				startFrom         latestTime;
				startTime         0;
				stopAt            endTime;
				endTime           1000;
				deltaT            1;
				writeInterval     500;	
        runTimeModifiable yes;
				writeFormat       binary;				

				functions
				(
          Q_gv_in { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName GV_INLET ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          } 
          Q_gv_out { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName GV_OUTLET ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          } 
          Q_ru_in { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName RU_INLET ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          } 
          Q_ru_out { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName RU_OUTLET ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          }
          Q_gv_perioss { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName GV_PERIOSS ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          }
          Q_gv_periops { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName GV_PERIOPS ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          }
          Q_ru_perioss { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName RU_PERIOSS ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          }
          Q_ru_periops { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName RU_PERIOPS ; 
            expression &quot; phi &quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          }                         
          ptot_gv_in { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName GV_INLET ; 
            expression &quot; (p+.5*magSqr(U)) * phi / sum( phi )&quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          } 
          ptot_gv_out { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName GV_OUTLET ; 
            expression &quot; (p+.5*magSqr(U)) * phi / sum( phi )&quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          } 
          ptot_ru_in { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName RU_INLET ; 
            expression &quot; (p+.5*magSqr(U)) * phi / sum( phi )&quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          } 
          ptot_ru_out { 
            type swakExpression ; 
            valueType patch ; 
            verbose true ; 
            patchName RU_OUTLET ; 
            expression &quot; (p+.5*magSqr(U)) * phi / sum( phi )&quot; ; 
            accumulations ( sum ) ; 
            outputInterval 1 ; 
          }             
          forces { 
            type forces ; 
            functionObjectLibs ( &quot;libforces.so&quot; ) ; 
            outputControl timeStep ; 
            outputInterval 1 ; 
            patches ( RU_BLADE ) ; 
            rhoName rhoInf ; 
            log true ; 
            rhoInf 997 ; 
            CofR ( 0 0 0 ) ; 
          }             
        );

				libs (
          &quot;libOpenFoamTurbo.so&quot;							
					&quot;libsimpleFunctionObjects.so&quot;
					&quot;libsimpleSwakFunctionObjects.so&quot;
				);				
			}
			decomposeParDict
			{
				dtOOFileName         &quot;system/decomposeParDict&quot;;
				
				numberOfSubdomains   4;

				method               patchConstrained;

				globalFaceZones ( 
          RU_PERIOSS_zone 
          RU_PERIOPS_zone 
          GV_PERIOSS_zone 
          GV_PERIOPS_zone 
          RU_INLET_zone 
          GV_OUTLET_zone 
				);
				patchConstrainedCoeffs
				{
					method                metis;
					numberOfSubdomains    4;
					patchConstraints
					(
						(GV_PERIOSS 0)
						(GV_PERIOPS 0)
						(GV_OUTLET 0)				
            (RU_INLET 0)								
						(RU_PERIOSS 0)
						(RU_PERIOPS 0)
					);
				}
			}
		  fvSchemes 
		  {
		    dtOOFileName        &quot;system/fvSchemes&quot;;
				ddtSchemes
				{
					default steadyState;
				}

				gradSchemes
				{
					default         cellLimited Gauss linear 0.33;
					grad(p)         cellLimited Gauss linear 0.33;
					grad(U)         cellLimited Gauss linear 0.33;
				}

				divSchemes
				{
					default                        none;
					div(phi,U)                     Gauss linearUpwindV cellLimited Gauss linear 0.33;
					div(phi,k)                     Gauss upwind;
					div(phi,epsilon)               Gauss upwind;
					div((nuEff*dev(grad(U).T())))  Gauss linear;
				}

				laplacianSchemes 
				{ 
					default Gauss linear limited 0.333; 
				} 

				snGradSchemes 
				{ 
					default limited 0.333; 
				} 

				interpolationSchemes
				{
					default         linear;
					interpolate(U)  linear;
				}

				fluxRequired
				{
					default         no;
					p;
				}
				mixingPlane
				{   
						default        areaAveraging;
						p              areaAveraging;
						U              areaAveraging;
						k              areaAveraging;
						epsilon        areaAveraging;
				}
		  }
		  fvSolution
		  {
		    dtOOFileName        &quot;system/fvSolution&quot;;
				solvers
				{
					p
					{
						solver           PCG;
						preconditioner   FDIC;
						tolerance        1e-06;
						relTol           0.1;
				    maxIter          200;
				    minIter          20;
					};
					U
					{
						solver           BiCGStab;
						preconditioner   DILU;
						tolerance        1e-08;
						relTol           0.0;
				    maxIter          200;
				    minIter          2;				
					};
					k
					{
						solver           BiCGStab;
						preconditioner   DILU;
						tolerance        1e-08;
						relTol           0.0;
				    maxIter          200;
				    minIter          2;				
					};
					epsilon
					{
						solver           BiCGStab;
						preconditioner   DILU;
						tolerance        1e-08;
						relTol           0.0;
				    maxIter          200;
				    minIter          2;				
					};
				}
				relaxationFactors
				{
					p               0.3;
					U               0.7;
					k               0.7;				
					epsilon         0.7;				
				}
				SIMPLE
				{
					nNonOrthogonalCorrectors 1;
				}				
		  }
		  transportModel
		  {
				dtOOFileName        &quot;constant/transportProperties&quot;;
				transportModel  Newtonian;

				nu              nu [0 2 -1 0 0 0 0] 1.0e-06;
			}
		  RASProperties
      {
				dtOOFileName        &quot;constant/RASProperties&quot;;
				RASModel            kEpsilon;
				turbulence          on;

				kEpsilonCoeffs
				{
					Cmu              0.09;
					C1               1.44;
					C2               1.92;
					alphaEps         0.76923;
				}				
			}
		  MRFZones
      {				
				noWriteRuleStart 0;
				
				RU
				{
					patches ();
					nonRotatingPatches ( RU_INLET RU_OUTLET RU_SHROUD );
					origin    origin [0 1 0 0 0 0 0]  (0 0 0);
					axis      axis   [0 0 0 0 0 0 0]  (0 0 1);
					omega     omega  [0 0 -1 0 0 0 0] -#cV_omega#;
				}

				noWriteRuleEnd 1;
				
				dtOOFileName        &quot;constant/MRFZones&quot;;
			}				
		"		
		fieldRule="
			{
				:volVectorField::U::[0 1 -1 0 0 0 0]::(0 0 0 ):
			}
			{
				:volScalarField::p::[0 2 -2 0 0 0 0]::0:
			}
			{
				:volScalarField::k::[0 2 -2 0 0 0 0]::`(3./2.) * (#cV_U# * #cV_I#)^2`:
			}
			{
				:volScalarField:
				:epsilon:
				:[0 2 -3 0 0 0 0]:
				:`#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.038 * #cV_L#)`:
			}
			{
				:volScalarField::nut::[0 2 -1 0 0 0 0]::0.1:
			}
		"
		setupRule="
		  {
				:OpenFOAMEmptyRule:::::
			}
		  {
				:OpenFOAMCyclicGgiRule::GV_PERIOPS,GV_PERIOSS::
				bridgeOverlap(false),
				rotationAngle(-360./#cV_gv_nBlades#), 
				rotationAxis(0,0,1),
				separationOffset(0,0,0):
			}									
		  {
				:OpenFOAMCyclicGgiRule::RU_PERIOPS,RU_PERIOSS::
				bridgeOverlap(false),
				rotationAngle(-360./#cV_ru_nBlades#), 
				rotationAxis(0,0,1),
				separationOffset(0,0,0):
			}	
		  {
				:OpenFOAMWallRule::GV_HUB:::
				:U::fixedValue(value uniform (0 0 0);):
				:p::zeroGradient(value uniform 0;):
				:k::kqRWallFunction(value uniform 0;):
				:epsilon::epsilonWallFunction(
							U        U;
							refValue uniform 0.0;
							value    uniform `#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.4 * #cV_LWall#)`;
					):
				:nut::nutWallFunction(value uniform 0.0;):
			}
		  {
				:OpenFOAMWallRule::GV_SHROUD:::
				:U::fixedValue(value uniform (0 0 0);):
				:p::zeroGradient(value uniform 0;):
				:k::kqRWallFunction(value uniform 0;):
				:epsilon::epsilonWallFunction(
							U        U;
							refValue uniform 0.0;
							value    uniform `#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.4 * #cV_LWall#)`;
					):
				:nut::nutWallFunction(value uniform 0.0;):
			}
		  {
				:OpenFOAMWallRule::GV_BLADE:::
				:U::fixedValue(value uniform (0 0 0);):
				:p::zeroGradient(value uniform 0;):
				:k::kqRWallFunction(value uniform 0;):
				:epsilon::epsilonWallFunction(
							U        U;
							refValue uniform 0.0;
							value    uniform `#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.4 * #cV_LWall#)`;
					):
				:nut::nutWallFunction(value uniform 0.0;):
			}				
		  {
				:OpenFOAMWallRule::RU_HUB:::
				:U::fixedValue(value uniform (0 0 0);):
				:p::zeroGradient(value uniform 0;):
				:k::kqRWallFunction(value uniform 0;):
				:epsilon::epsilonWallFunction(
							U        U;
							refValue uniform 0.0;
							value    uniform `#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.4 * #cV_LWall#)`;
					):
				:nut::nutWallFunction(value uniform 0.0;):
			}
		  {
				:OpenFOAMWallRule::RU_SHROUD:::
				:U::fixedValue(value uniform (0 0 0);):
				:p::zeroGradient(value uniform 0;):
				:k::kqRWallFunction(value uniform 0;):
				:epsilon::epsilonWallFunction(
							U        U;
							refValue uniform 0.0;
							value    uniform `#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.4 * #cV_LWall#)`;
					):
				:nut::nutWallFunction(value uniform 0.0;):
			}
		  {
				:OpenFOAMWallRule::RU_BLADE:::
				:U::fixedValue(value uniform (0 0 0);):
				:p::zeroGradient(value uniform 0;):
				:k::kqRWallFunction(value uniform 0;):
				:epsilon::epsilonWallFunction(
							U        U;
							refValue uniform 0.0;
							value    uniform `#cV_Cmu#*((3./2.) * (#cV_U# * #cV_I#)^2)^(3./2.) / (0.4 * #cV_LWall#)`;
					):
				:nut::nutWallFunction(value uniform 0.0;):
			}
		  {
				:OpenFOAMSetupRule::GV_INLET:
				::
				:U::profile1DfixedValue(
						fileName          &quot;../../IN_OUTLET_Ucyl_Q1.csv&quot;;
						fileFormat        &quot;turboCSV&quot;;
						interpolateCoord  &quot;R&quot;;
						fieldName         &quot;Velocity&quot;;
					):
				:p::zeroGradient( value uniform 0; ):
				:k::profile1DfixedValue(
						fileName          &quot;../../IN_OUTLET_k_Q1.csv&quot;;
						fileFormat        &quot;turboCSV&quot;;
						interpolateCoord  &quot;R&quot;;
						fieldName         &quot;K&quot;;
					):
				:epsilon::profile1DfixedValue(
						fileName          &quot;../../IN_OUTLET_epsilon_Q1.csv&quot;;
						fileFormat        &quot;turboCSV&quot;;
						interpolateCoord  &quot;R&quot;;
						fieldName         &quot;Epsilon&quot;;
					):
			}					
		  {
				:OpenFOAMMixingPlaneRule::GV_OUTLET,RU_INLET:
				:
					coordinateSystem(
							type            cylindrical;
							name            mixingCS;
							origin          (0 0 0);
							e1              (1 0 0);
							e3              (0 0 1);
					),
					sweepAxis(Theta),
					stackAxis(R),
					discretisation(bothPatches)
				:
			}
			{
				:OpenFOAMSetupRule::RU_OUTLET:::
				:U::zeroGradient(value uniform (0 0 0);):
				:p::profile1DfixedValue(
						fileName          &quot;../../DT_INLET_p_Q1.csv&quot;;
						fileFormat        &quot;turboCSV&quot;;
						interpolateCoord  &quot;R&quot;;
						fieldName         &quot;Pressure&quot;;
        ):
        :k::zeroGradient(value uniform 0;):
        :epsilon::zeroGradient(value uniform 0;):
      }
		"
				
		runCommand="pwd"
  >
		<option name="keepOrientation" value="true"/>
		<boundedVolume label="gv_gridGmsh"/>		
		<boundedVolume label="ru_gridGmsh"/>
	</case>	
</gvru_coupled_fe>
