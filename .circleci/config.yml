version: 2.1

jobs:
  build:
    docker:
      - image: "cimg/base:current"
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Docker image
          command: |
            GIT_REV=`git rev-parse HEAD`
            GIT_DESC=`git describe --tags`
            GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`
            GIT_THIRDPARTY_SHA=`git ls-tree HEAD dtOO-ThirdParty | awk '{print $3}'`
            DOCKER_TAG=unstable
            if [[ "$GIT_BRANCH" == "main" ]]; then DOCKER_TAG=stable ; fi
            docker build \
              --build-arg "TAG=${GIT_THIRDPARTY_SHA}" \
              --build-arg "GIT_REV=${GIT_REV}" \
              --progress=plain \
              -t ${DOCKER_USERNAME}/dtoo:${GIT_REV} \
              -t ${DOCKER_USERNAME}/dtoo:latest \
              -t ${DOCKER_USERNAME}/dtoo:${GIT_DESC} \
              -t ${DOCKER_USERNAME}/dtoo:${DOCKER_TAG} .
            echo "$DOCKER_PASSWORD" \
              | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push \
              --all-tags \
              ${DOCKER_USERNAME}/dtoo
  build-ubuntu:
    docker:
      - image: "cimg/base:current"
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build and Push Docker image
          command: |
            GIT_REV=`git rev-parse HEAD`
            GIT_DESC=`git describe --tags`
            GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`
            GIT_THIRDPARTY_SHA=`git ls-tree HEAD dtOO-ThirdParty | awk '{print $3}'`
            DOCKER_TAG=unstable
            if [[ "$GIT_BRANCH" == "main" ]]; then DOCKER_TAG=stable ; fi
            docker build \
              --build-arg "TAG=${GIT_THIRDPARTY_SHA}" \
              --build-arg "GIT_REV=${GIT_REV}" \
              --build-arg "CONTAINER=atismer/dtoo-base-ubuntu" \
              --progress=plain \
              -t ${DOCKER_USERNAME}/dtoo-ubuntu:${GIT_REV} \
              -t ${DOCKER_USERNAME}/dtoo-ubuntu:latest \
              -t ${DOCKER_USERNAME}/dtoo-ubuntu:${GIT_DESC} \
              -t ${DOCKER_USERNAME}/dtoo-ubuntu:${DOCKER_TAG} .
            echo "$DOCKER_PASSWORD" \
              | docker login -u "$DOCKER_USERNAME" --password-stdin
            docker push \
              --all-tags \
              ${DOCKER_USERNAME}/dtoo-ubuntu
  build-dirty:
    docker:
      - image: "cimg/base:current"
    resource_class: large
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build dirty image
          command: |
            GIT_REV=`git rev-parse HEAD`
            GIT_DESC=`git describe --tags`
            GIT_BRANCH=`git rev-parse --abbrev-ref HEAD`
            GIT_THIRDPARTY_SHA=`git ls-tree HEAD dtOO-ThirdParty | awk '{print $3}'`
            DOCKER_TAG=unstable
            if [[ "$GIT_BRANCH" == "main" ]]; then DOCKER_TAG=stable ; fi
            docker build \
              --build-arg "TAG=${GIT_THIRDPARTY_SHA}" \
              --build-arg "GIT_REV=${GIT_REV}" \
              --build-arg "CONTAINER=atismer/dtoo-base-ubuntu" \
              --progress=plain \
              -t ${DOCKER_USERNAME}/dirty:${GIT_REV} \
              -t ${DOCKER_USERNAME}/dirty:latest \
              --target base  .
      - run:
          name: Save image as tar
          command: |
            mkdir -p images
            docker image save -o "images/dirty-${CIRCLE_SHA1}" "atismer/dirty:latest"
      - persist_to_workspace:
          root: .
          paths:
            - images
  test-dirty:
    docker:
      - image: "cimg/base:current"
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Load image
          command: |
            docker image load < "images/dirty-${CIRCLE_SHA1}"
      - run:
          name: Inspect loaded image
          command: |
            docker image ls
      - run:
          name: Run base test
          command: |
            docker run -w /dtOO/build atismer/dirty:latest ctest --output-on-failure -L base
  test-dirty2:
    docker:
      - image: "cimg/base:current"
    resource_class: large
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          name: Load image
          command: |
            docker image load < "images/dirty-${CIRCLE_SHA1}"
      - run:
          name: Inspect loaded image
          command: |
            docker image ls
      - run:
          name: Run base test
          command: |
            docker run -w /dtOO/build atismer/dirty:latest ctest --output-on-failure -L gcc-$(${CC} -dumpversion)
workflows:
  wf-build:
    jobs:
      - build-dirty
      - test-dirty:
          requires:
            - build-dirty
      - test-dirty2:
          requires:
            - build-dirty
